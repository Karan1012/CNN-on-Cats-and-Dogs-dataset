# -*- coding: utf-8 -*-
"""Project1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JPwLX1tk4Vhcrsra0icoGpJJD5QrDTz9
"""

from google.colab import drive
drive.mount('/content/gdrive/',force_remount=True)
import sys
import os
prefix = '/content/gdrive/My Drive/'
# modify "customized_path_to_your_homework" here to where you uploaded your homework
customized_path_to_your_homework = 'project'
sys_path = os.path.join(prefix, customized_path_to_your_homework)
sys.path.append(sys_path)
print(sys_path)

import pickle
import numpy as np

pickle_in=open(sys_path+'/X_train.pickle','rb')
X_train=pickle.load(pickle_in)
X_train = X_train/255.0
pickle_in=open(sys_path+'/X_validation.pickle','rb')
X_validation=pickle.load(pickle_in)
X_validation = X_validation/255.0
pickle_in=open(sys_path+'/y_train.pickle','rb')
Y_train=pickle.load(pickle_in)

pickle_in=open(sys_path+'/y_validation.pickle','rb')
Y_validation=np.array(pickle.load(pickle_in))

# print(np.shape(Y_train))
# print(np.shape(X_train))
# print(np.shape(Y_validation[:,1]))
# print(np.shape(X_validation))

import tensorflow
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Conv2D, Activation, MaxPooling2D, Dense, Flatten, Dropout
from keras.preprocessing.image import ImageDataGenerator
from IPython.display import display
from PIL import Image
from keras.models import load_model
import numpy as np
from sklearn import metrics

print(tensorflow.__version__)
classifier = Sequential()
classifier.add(Conv2D(64, (3, 3), input_shape=(150, 150, 3)))
classifier.add(Activation('relu'))
classifier.add(MaxPooling2D(pool_size=(2, 2)))
classifier.add(Conv2D(64, (3, 3)))
classifier.add(Activation('relu'))
classifier.add(MaxPooling2D(pool_size=(2, 2)))
classifier.add(Conv2D(64, (3, 3)))
classifier.add(Activation('relu'))
classifier.add(MaxPooling2D(pool_size=(2, 2)))
classifier.add(Flatten())
classifier.add(Dense(32))
classifier.add(Activation('relu'))
classifier.add(Dropout(0.5))
classifier.add(Dense(1))
classifier.add(Activation('sigmoid'))
classifier.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
classifier.summary()
classifier.fit(X_train, Y_train, epochs=20, batch_size=32, validation_split=0)
# k = classifier.fit(X_train, Y_train, epochs=20, batch_size=32, validation_split=30)

# y_pred=classifier.predict(X_validation)
# print("Accuracy:",metrics.accuracy_score(Y_validation, y_pred))

# predictions = model.predict(X_test)
# predicted_val = [int(round(p[0])) for p in predictions]

# train_datagen = ImageDataGenerator(rescale=1. / 255,
#                                    shear_range=0.2,
#                                    zoom_range=0.2,
#                                    horizontal_flip=True)
# test_datagen = ImageDataGenerator(rescale=1. / 255)
# training_set = train_datagen.flow_from_directory('project1/train',
#                                                  target_size=(150, 150),
#                                                  batch_size=32,
#                                                  class_mode='binary')

# test_set = test_datagen.flow_from_directory('project1/validation',
#                                             target_size=(150, 150),
#                                             batch_size=32,
#                                             class_mode='binary')

# classifier.fit_generator(X_train,
#                          steps_per_epoch=625,
#                          epochs=30,
#                          validation_data=X_validation,
#                          validation_steps=5000)
# classifier.save('catdog_cnn_model.h5')

# classifier = load_model('catdog_cnn_model.h5')
# classifier.fit(X_train, y_train)
# y_pred=classifier.predict(X_test)

# k.history.keys()
scores = classifier.evaluate(X_validation, Y_validation, verbose=0)
print("%s: %.2f%%" % (classifier.metrics_names[1], scores[1]*100))
# print("%s: %.2f%%" % (classifier.metrics_names[0], scores[0]*100))

from keras.models import Model
import matplotlib.pyplot as plt
layer_outputs = [layer.output for layer in classifier.layers]
activation_model = Model(inputs=classifier.input, outputs=layer_outputs)
activations = activation_model.predict(X_train[2].reshape(1,150, 150, 3))
 
def display_activation(activations, col_size, row_size, act_index): 
    activation = activations[act_index]
    activation_index=0
    fig, ax = plt.subplots(row_size, col_size, figsize=(row_size*2.5,col_size*1.5))
    for row in range(0,row_size):
        for col in range(0,col_size):
            ax[row][col].imshow(activation[0, :, :, activation_index], cmap='viridis')
            activation_index += 1

display_activation(activations, 8, 8, 0)

display_activation(activations, 8, 8, 3)

display_activation(activations, 8, 8, 6)